%%writefile log_processor.py
from mrjob.job import MRJob

class LogFileProcessor(MRJob):

    def mapper(self, _, line):
        try:

            parts = line.split(' ', 2)
            if len(parts) >= 2:
                log_level = parts[2]
                yield (log_level, 1)
            else:
                yield ("MALFORMED", 1)
        except Exception as e:
            yield ("ERROR", 1)

    def reducer(self, key, values):
        try:
            yield (key, sum(values))
        except Exception as e:
            yield ("ERROR", 1)

if __name__ == '__main__':
    LogFileProcessor.run()

%%writefile logs.txt
2025-04-28 10:00:00 INFO Starting system
2025-04-28 10:01:00 ERROR Failed to load module
2025-04-28 10:02:00 INFO System running
2025-04-28 10:03:00 WARNING Disk almost full
2025-04-28 10:04:00 ERROR Could not connect to server

!python log_processor.py logs.txt
--------------------------------------------------------------------------------------------

%%writefile log_processor.py
This writes the Python code below it into a file called log_processor.py.

from mrjob.job import MRJob
This imports MRJob, a Python module that allows us to create MapReduce jobs easily using the mrjob library.

class LogFileProcessor(MRJob):
This defines a new class called LogFileProcessor that inherits from MRJob. It will hold the map and reduce logic.

def mapper(self, _, line):
This is the mapper function. It processes one line of the input at a time. The _ means we are ignoring the key (not needed here), and line is each line from the log file.

python
Copy code
parts = line.split(' ', 2)
This splits the line into 3 parts using space (' ') as the separator:

First part: date (e.g., 2025-04-28)

Second part: time (e.g., 10:00:00)

Third part: the log level and message (e.g., INFO Starting system)

python
Copy code
if len(parts) >= 2:
    log_level = parts[2]
    yield (log_level, 1)
If the line has at least 3 parts, it takes the third part (e.g., "INFO Starting system") and treats it as the log level. It emits it with a count of 1.

ðŸ“Œ Issue: It should actually extract the log level only, but this code yields the full third part. Better would be:

python
Copy code
log_level = parts[2].split()[0]
python
Copy code
else:
    yield ("MALFORMED", 1)
If the line doesn't have enough parts, it is considered malformed.

python
Copy code
except Exception as e:
    yield ("ERROR", 1)
If any error happens in the mapper, it returns "ERROR".

def reducer(self, key, values):
This function sums all values grouped by the same key.

python
Copy code
yield (key, sum(values))
For each log level (e.g., "INFO"), it adds all the counts and returns the total.

python
Copy code
except Exception as e:
    yield ("ERROR", 1)
If something goes wrong during reducing, it yields an "ERROR".

if __name__ == '__main__':
This ensures the code runs only when the file is executed directly.

LogFileProcessor.run()
This runs the MapReduce job using the mrjob library.

âœ… Sample Log File: logs.txt
text
Copy code
2025-04-28 10:00:00 INFO Starting system
2025-04-28 10:01:00 ERROR Failed to load module
2025-04-28 10:02:00 INFO System running
2025-04-28 10:03:00 WARNING Disk almost full
2025-04-28 10:04:00 ERROR Could not connect to server
These are example logs with different log levels (INFO, ERROR, WARNING). This file will be passed as input to the MapReduce job.

!python log_processor.py logs.txt
This runs the MapReduce job on the logs file.

ðŸŽ“ External Examiner Questions & Answers
1. Q: What is MapReduce?
A: MapReduce is a programming model used to process large datasets in parallel by dividing the task into two phases â€” map (filtering/sorting) and reduce (aggregating).

2. Q: What does the mapper function do in this code?
A: It extracts the log level (e.g., INFO, ERROR) from each line and emits it with a count of 1.

3. Q: What does the reducer function do?
A: It sums up the count of each log level to find how many times each appeared in the file.

4. Q: What is the role of yield in this script?
A: yield emits key-value pairs from mapper/reducer to be processed by the mrjob framework.

5. Q: What happens if a line is malformed or causes an error?
A: It emits "MALFORMED" or "ERROR" as the key with a count of 1.

6. Q: Why is split(' ', 2) used in the mapper?
A: To break the log line into 3 parts: date, time, and the rest of the message.

7. Q: Is this code extracting the log level correctly?
A: No. It's returning the full third part including the message. It should split parts[2] again and take only the first word.

8. Q: How would you fix the incorrect log level extraction?
A: Replace:

python
Copy code
log_level = parts[2]
With:

python
Copy code
log_level = parts[2].split()[0]